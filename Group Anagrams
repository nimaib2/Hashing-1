// Time Complexity : O(N*KlogK)
// Space Complexity : O(NK)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : None

// Your code here along with comments explaining your approach
Essentially, my code goes through all the words in strs and creates a key for each string by reorganizing every character in the string so that it is alphabetically ordered. This means that any combination of the same letters will map to the same key
(e.g. 'tac', 'cat', 'act' are all reorganized to 'act' using this method). After that, we can return a list of the lists of words contained within the HashMaps that contain the key/value pairings.

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> groups = new HashMap<>();
        for(String str:strs){
            char[] ch = str.toCharArray();
            Arrays.sort(ch);
            String keyStr=String.valueOf(ch);
            if(!groups.keySet().contains(keyStr)){
                groups.put(keyStr, new ArrayList<String>());
            }
            groups.get(keyStr).add(str);
        }
        return new ArrayList<>(groups.values());
    }
}
